define MODULExNAME HASH("st-purge-full")
define STACKxSIZE 50
define MEMORYxSTART 0
define PURGExROUTE 2
define COALxROUTE 3
define HOLDxROUTE 0
alias Store d0
alias Router d1
alias HoldValve d2
alias StoreExitValve d3
alias LED d5
alias lastImported r0
alias hashArraySize r1
alias idx r2
alias qtty r3
alias hash r4
alias slotsToPurge r5
alias allSlots r6
alias slotsToTest r7
move lastImported 0
main:
  sleep 30
  l r15 Store ImportCount
  beq r15 lastImported main #If import count is not changed -- do nothing
  s LED On 1
  jal holdline
  s HoldValve Open 0
  sbn HASH("StructureChuteDigitalValveRight") HASH("store-input-valve") Open 0
  move hashArraySize 0
  jal collecthashes
  bnezal hashArraySize handlehashes
  l r15 Store ImportCount
  move lastImported r15
  sbn HASH("StructureChuteDigitalValveRight") HASH("store-input-valve") Open 1
  sbn HASH("StructureLogicMemory") HASH("store-mutex") Setting 0 #Free line
  s LED Color Color.Gray
  s LED On 0
j main
collecthashes:
  s LED Color Color.Yellow
  l slotsToTest Store Quantity #Get amount of occupated slots
  beqz slotsToTest ra #If store is empty - return
  move idx 2 #Start slot for content
  foreachslotfind:
    ls r14 Store idx Occupied
    ls qtty Store idx Quantity
    ls hash Store idx OccupantHash
    add idx idx 1
    sbn HASH("StructureLogicMemory") HASH("store-current-hash") Setting hash
    beqz r14 foreachslotfind #Check the slot is occupied
    sub slotsToTest slotsToTest 1
    j updatequantity
    updated:
  bnez slotsToTest foreachslotfind
j ra
updatequantity:
  move sp MEMORYxSTART
  add sp sp hashArraySize
  seq r15 qtty STACKxSIZE
  searchexistent:
    ble sp MEMORYxSTART searchexistentend
    pop r14 #allSlots
    pop r13 #slotsToPurge
    pop r12 #hash
    bne r12 hash searchexistent
    push r12
    add r13 r13 r15
    push r13
    add r14 r14 1
    push r14
  searchexistentend:
  brne sp MEMORYxSTART 6 #if found do nothing if not add
    add sp sp hashArraySize
    push hash #hash
    push r15  #full slots
    push 1    #all slots
    add hashArraySize hashArraySize 3
j updated
handlehashes:
  move sp MEMORYxSTART
  add sp sp hashArraySize
  forechhash:
    pop allSlots #all slots
    pop slotsToPurge #slots to operate
    pop hash #hash
    sbn HASH("StructureLogicMemory") HASH("store-current-hash") Setting hash
    breqz slotsToPurge 11 #Ignore cases when we have only one or zero slots to stack
      s LED Color Color.Orange
      move r10 ra
      bgtzal allSlots stackhash
      brgtz allSlots -1 #repeat for all slots
      move ra r10
      s HoldValve Open 1
      sleep 6
      ls r15 HoldValve 0 Occupied #Check until clear hold route
      brnez r15 -2
      s HoldValve Open 0
  bgt sp MEMORYxSTART forechhash
j ra
stackhash:
   s StoreExitValve Open 0
   s Store RequestHash hash
   sleep 1
   ls r15 StoreExitValve 0 Quantity
   breqz r15 -2 #Wait qtty on the exit trap
   sub allSlots allSlots 1
   breq r15 STACKxSIZE 3 #Item is full put it on stack
     s Router Setting HOLDxROUTE
   jr 4
     seq r14 hash HASH("ItemCoalOre")
     select r14 r14 COALxROUTE PURGExROUTE
     s Router Setting r14
   s StoreExitValve Open 1
   sleep 1
   ls r15 StoreExitValve 0 Occupied
   brnez r15 -2 #Wait qtty off the exit trap
j ra
holdline:
  s LED Color Color.Blue
  lbn r15 HASH("StructureLogicMemory") HASH("store-mutex") Setting Minimum
  beqal r15 MODULExNAME ra
  brnez r15 2
  sbn HASH("StructureLogicMemory") HASH("store-mutex") Setting MODULExNAME
  brnan r15 -1
  sleep 1
j holdline