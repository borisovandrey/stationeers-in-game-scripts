define MODULExNAME HASH("st-stack-all")
define STACKxSIZE 50
alias Store d0
alias Router d1
alias HoldValve d2
alias StoreExitValve d3
alias Stacker d4
alias LED d5
alias hashArraySize r1
alias qtty r3
alias hash r4
alias slotsToStack r5
alias allSlots r6
move r0 0
main:
  sleep 10
  l r15 Store ImportCount
  beq r15 r0 main #If import count is not changed -- do nothing
  s LED On 1
  jal holdline
  s HoldValve Open 0
  s Stacker Activate 0
  sbn HASH("StructureChuteDigitalValveRight") HASH("store-input-valve") Open 0
  s Stacker Setting STACKxSIZE
  move hashArraySize 0
  jal collecthashes
  bnezal hashArraySize handlehashes
  l r15 Store ImportCount
  move r0 r15
  sbn HASH("StructureChuteDigitalValveRight") HASH("store-input-valve") Open 1
  sbn HASH("StructureLogicMemory") HASH("store-mutex") Setting 0 #Free line
  s LED Color Color.Gray
  s LED On 0
j main
collecthashes:
  s LED Color Color.Yellow
  l r7 Store Quantity #Get amount of occupated slots
  beqz r7 ra #r7 - slots to test If store is empty - return
  move r2 2 #r2 - index Start slot for content
  foreachslotfind:
    ls r14 Store r2 Occupied
    ls qtty Store r2 Quantity
    ls hash Store r2 OccupantHash
    add r2 r2 1
    sbn HASH("StructureLogicMemory") HASH("store-current-hash") Setting hash
    beqz r14 foreachslotfind #Check the slot is occupied
    sub r7 r7 1
    j updatequantity
    updated:
  bnez r7 foreachslotfind
j ra
updatequantity:
  move sp 0
  add sp sp hashArraySize
  sne r15 qtty STACKxSIZE
  searchexistent:
    ble sp 0 searchexistentend
    pop r14 #allSlots
    pop r13 #slotsToStack
    pop r12 #hash
    bne r12 hash searchexistent
    push r12
    add r13 r13 r15
    push r13
    add r14 r14 1
    push r14
  searchexistentend:
  brne sp 0 6 #if found do nothing if not add
    add sp sp hashArraySize
    push hash #hash
    push r15  #not full slots
    push 1    #all slots
    add hashArraySize hashArraySize 3
j updated
handlehashes:
  move sp 0
  add sp sp hashArraySize
  forechhash:
    pop allSlots #all slots
    pop slotsToStack #slots to operate
    pop hash #hash
    sbn HASH("StructureLogicMemory") HASH("store-current-hash") Setting hash
    move r8 0 #r8 hold line protection by limit (10)
    brle slotsToStack 1 16 #Ignore cases when we have only one or zero slots to stack
      s LED Color Color.Orange
      move r10 ra
      bgtzal allSlots stackhash
      brge r8 10 2 #protect hold from overflow (10 section)
      brgtz allSlots -2 #repeat for all slots
      move ra r10
      s HoldValve Open 1
      sleep 1
      ls r15 Stacker 0 Occupied
      brnez r15 -2 #Wait stacker is empty
      s Stacker Activate 1 #empty stacker
      sleep 6
      ls r15 HoldValve 0 Occupied #Check until clear hold route
      brnez r15 -2
      s HoldValve Open 0
  bgt sp 0 forechhash
j ra
stackhash:
   s StoreExitValve Open 0
   s Store RequestHash hash
   sleep 1
   ls r15 StoreExitValve 0 Quantity
   breqz r15 -2 #Wait qtty on the exit trap
   sub allSlots allSlots 1
   breq r15 STACKxSIZE 3 #Item is full put it on stack
     s Router Setting 4 #Stack route
   jr 3
     s Router Setting 0 #Hold route
     add r8 r8 1 #r8 - hold size
   s StoreExitValve Open 1
   sleep 1
   ls r15 StoreExitValve 0 Occupied
   brnez r15 -2 #Wait qtty off the exit trap
j ra
holdline:
  s LED Color Color.Blue
  lbn r15 HASH("StructureLogicMemory") HASH("store-mutex") Setting Minimum
  beqal r15 MODULExNAME ra
  brnez r15 2
  sbn HASH("StructureLogicMemory") HASH("store-mutex") Setting MODULExNAME
  brnan r15 -1
  sleep 1
j holdline