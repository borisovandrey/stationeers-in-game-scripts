#Inspired by #From https://www.reddit.com/r/Stationeers/comments/yz28ce/furnace_thermal_mechanics_help/
#Algorithm of PID regulqtor is taken from https://en.wikipedia.org/wiki/PID_controller and changed to work with normalized deviation
#Target point is set as pair (T,P) T in celsius
#Algorithm works with preapred working body (CO2 cobusted in saved in insulated tank).
#Is not suit to ignition furnance usage.
#For fast reach of the SP preapre a big supply of hot gas.
#600 steel (450 iron and 150 coal) with pressure 2000 and temp 1200 consumes about 9Mpa of 2052 grad in 1000L  
alias LED d0         #Led indicator for current furnance activity Red for hot gas, Blue for cool gas
alias hotInput d1    #The pump for hot (2500C) CO2 gas
alias coolInput d2   #The pump for cool (less 0C) CO2 gas
alias switch d3      #Start switch
alias tempTgt d4    #Memory device with set of the temeprature target    
alias prssTgt d5    #Memory device with set of the the pressure target

#TODO: think about small resource consumptiom methodics
const FURNANCE = 545937711
const PRESSURExMAX = 50000

#The valve that closes direct access to preparation countur
const VALVExTYPE = 113 # HASH("StructureDigitalValve") 
const VALVExNAME = 114 # HASH("fa-inj-auto-sw")

#Stack offset for calculated temperature values
const TEMPERATURExADDR = 10 
#Stack offset for calculated pressure values
const PRESSURExADDR = 30

const Kp = 1.5          #deviation coeffecient
const Ki = 0.5          #Integral deviation coeffecient
const Kd = 0.2          #Differencial deviation coeffecient
const dt = 0.5          #Delta time
const Klvn = 273.15     #Kelvin value for 0C
#Decoy coeffecients of integral data - step out from classic algorithm to reduce oscilation  
const AGINGxERRORxTHRESHOLD = 0.15
const AGINGxLOWxERROR = 0.5
const AGINGxHIGHxERROR = 0.8
#Coeffecient for low-pass filter
#A larger alpha smooths the derivative more, 
#while a smaller alpha makes it more responsive but potentially noisier.
const LOWxPATHxFILTERxALPHA = 0.2

#We don't use local varaibles to have control of access 
var state            #State of furnance
var spAddr          #Stack address used in acces to calculated parameters
var tgtval          #Active target value for pressure or temperature
var previousdeviation   #The value of the normalized previous deviation in %
var integral         #Integral value of deviation in %
var currentVal      #Actual value of temperture or pressure

const STATExIDLE = 0 #Furnance is inactive
const STATExACTIVE = 1 #Furnance is active

const CONTROLLERxTOLLERANCE = 3.5 #If deviation is less then 0.035 we consider the furnance is on target
 
#Initialize
#Set everything to 0
hotInput.Setting = 0
coolInput.Setting = 0
state = STATExIDLE
previousdeviation = 0
integral = 0
tgtval = 0
spAddr = TEMPERATURExADDR
storeLocal()
spAddr = PRESSURExADDR
storeLocal()

#Main execution
main:
   sleep dt
   var furnIngotReady = d(FURNANCE).RecipeHash(Minimum) #Get furnance ready ingot reciept hash
   var requiredIngot = db.Setting  #Get required ingot reciept, set by UI controller
   seq furnIngotReady requiredIngot furnIngotReady #Check the recepts are similar, that mean that ingot is ready 
   var swOn = switch.Setting
   brnez swOn 3 #In case switch is set to OFF make LED gray 
      LED.Color = 1 #Gray - no activity
      jr 2 #If swithc is off don't put LED in green 
   breqz furnIngotReady 2 #Check ingot is ready
      LED.Color = 2 #Green - done
   #Current state is: (swOn && !furnIngotReady) 
   xor furnIngotReady furnIngotReady 1
   and currentVal swOn furnIngotReady
   #In case the state is changing
   bneal currentVal state onChangeState #Set state inside to currentVal
   beqz state main #Either switch is off or ingot is ready run IDLE cycle

   #Calculate Temperature
   var output = 0
   spAddr = TEMPERATURExADDR
   loadLocal() #load previous calculation for temperature
   currentVal = d(FURNANCE).Temperature(Minimum)
   var deviation = (tgtval - currentVal) / tgtval #Normalized deviation in %
   pidController() #Apply PID algorithm for temp
   var outputTemp = output #Normalized output
   storeLocal()

   #Calculate pressure
   spAddr = PRESSURExADDR
   loadLocal() #load previous calculation for pressure
   currentVal = d(FURNANCE).Pressure(Minimum)
   brle currentVal PRESSURExMAX 4 #In case we run out of pressure limit stop everything
      currentVal = STATExIDLE
      jal onChangeState
      j main
   deviation = (tgtval - currentVal) / tgtval #Normalized deviation in %
   pidController() #Apply PID algorithm for pressure
   var outputPrss = output #Normalized output
   storeLocal()

   #Apply temp and pressure settings
   applyActuators()
j main

function onChangeState
   state = currentVal
   clr db #Clear stack
   breqz state 12 #If Current state is not IDLE
      sbn VALVExTYPE VALVExNAME On 0
      d(FURNANCE).SettingInput = 100 #Don't control input by furnance
      hotInput.On = 1
      coolInput.On = 1
      currentVal = tempTgt.Setting
      sp = TEMPERATURExADDR
      push currentVal
      currentVal = prssTgt.Setting
      sp = PRESSURExADDR
      push currentVal
      j ra #return
   d(FURNANCE).SettingInput = 0
   d(FURNANCE).SettingOutput = 0
   hotInput.Setting = 0
   coolInput.Setting = 0
   hotInput.On = 0
   coolInput.On = 0
   sbn VALVExTYPE VALVExNAME On 1
end

function storeLocal
   move sp spAddr
   push tgtval
   push previousdeviation
   push integral
end

function loadLocal
   sp = spAddr + 3
   pop integral
   pop previousdeviation
   pop tgtval
end

function pidController
   #Anti windup integral calculation with adaptive decoy
   abs currentVal deviation
   sge currentVal currentVal AGINGxERRORxTHRESHOLD
   select currentVal currentVal AGINGxHIGHxERROR AGINGxLOWxERROR 
   integral = integral * currentVal + deviation * dt
   min integral integral 1
   max integral integral -1
   #Low-Path filter for deviation
   previousdeviation = deviation * LOWxPATHxFILTERxALPHA + (1 - LOWxPATHxFILTERxALPHA) * previousdeviation
   #PID formula application
   output = Kp * deviation + Ki * integral  + Kd * ((deviation - previousdeviation) / dt)
   previousdeviation = deviation
   #Output is normalized in the [-1:1]
   min output output 1
   max output output -1
   output = output * 100 #Turn to procentage 
 end

function applyActuators 
   #We have output as procentage, and for simplicity we consider that max value of our actuator is 100 (if not make proportion)
   abs output outputPrss
   brgez outputPrss 4 #In case of negative deviation by pressure open the furnance output
      d(FURNANCE).SettingOutput = output
      outputPrss = 0 #Don't consider pressure deviation in input gas calculation 
   jr 2 
      #else
      d(FURNANCE).SettingOutput = 0 #Not enough pressure close furnance output

   #We don't have separate actuators for positive presure and (+/-)temepreture deviations
   #This mean we either open cool gas or hot gas and increase the presure by this
   #Here we check what is the deviation is more meanfull: pressure or temperature
   abs output outputTemp
   max output output outputPrss 
   brltz outputTemp 5 #If temperature is low the target use hot gas, but apply setting max from temp and pressure deviation
      LED.Color = 4 #Red heating
      hotInput.Setting = output
      coolInput.Setting = 0
   jr 4 
      #else
      #In case of temp is greater then target use cool gas and set output to max of pressure and temp deviation 
      LED.Color = -1 #Cooling heating with blue
      hotInput.Setting = 0
      coolInput.Setting = output

   brgt output CONTROLLERxTOLLERANCE 2 #Low output means low deviation and then we are on target
      LED.Color = 5 #Yellow in mode 
end
