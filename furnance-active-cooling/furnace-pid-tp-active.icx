#Inspired by #From https://www.reddit.com/r/Stationeers/comments/yz28ce/furnace_thermal_mechanics_help/
#Algorithm of PID regulqtor is taken from https://en.wikipedia.org/wiki/PID_controller and changed to work with normalized error
#Target point is set as pair (T,P) T in celsius
#Algorithm works with preapred working body (CO2 cobusted in saved in insulated tank).
#Is not suit to ignition furnance usage.
#For fast reach of the SP preapre a big supply of hot gas.
#600 steel (450 iron and 150 coal) with pressure 2000 and temp 1200 consumes about 9Mpa of 2052 grad in 1000L  
alias LED d0
alias hotinput d1
alias coolinput d2
alias switch d3
alias temp_sp d4
alias prss_sp d5

#TODO: add big pressure check (over 50 Mpa)
#TODO: implement algorithm with input filter for derivative from https://en.wikipedia.org/wiki/PID_controller
#TODO: think about small resource consumptiom methodics

#Temeperature is set in C
const temperature_sp_tgt = 0

#Ressure is set in KP
const pressure_sp_tgt = 0

const furnace = 545937711

const PresssureMax = 58000

const temperature_offset = 10
const pressure_offset = 30

const actuator_dead_area = 0.01

const Kp = 1.5
const Ki = 0.5
const Kd = 0.2
const dt = 0.5
const Klvn = 273.15

var state
var sp_offset
var sp_tgt
var previous_error
var integral
var pin_sp
var val

init()

main:
   sleep dt
   var sw = switch.Setting
   brnez sw 2
   LED.Color = 1 #Gray - inactive
   var rh = d(furnace).RecipeHash(Minimum)
   var ch = db.Setting
   seq rh ch rh
   breqz rh 2
   LED.Color = 2 #Green - done
   nor rh rh 0
   and val sw rh
   bneal val state changestate
   beqz state main

   #Calculate Temperature
   var output = 0
   sp_offset = temperature_offset
   loadlocal()
   val = d(furnace).Temperature(Minimum)
   var error = (sp_tgt - val) / sp_tgt
   pidcontroller()
   var output_t = output

   #Calculate pressure
   sp_offset = pressure_offset
   loadlocal()
   val = d(furnace).Pressure(Minimum)
   brle val PresssureMax 4
   val = 0
   jal changestate
   j main
   error = (sp_tgt - val) / sp_tgt
   pidcontroller()
   var output_p = output
   applyactuators()
j main

function init
   push ra
   hotinput.On = 1
   coolinput.On = 1
   d(furnace).On = 1
   hotinput.Setting = 0
   coolinput.Setting = 0

   state = 0
   previous_error = 0
   integral = 0

   sp_offset = temperature_offset
   sp_tgt = temperature_sp_tgt
   storelocal()

   sp_offset = pressure_offset
   sp_tgt = pressure_sp_tgt
   storelocal()
   pop ra
end

function changestate
   state = val
   breqz state 8
   val = temp_sp.Setting
   sp = temperature_offset
   push val
   val = prss_sp.Setting
   sp = pressure_offset
   push val
   j ra
   d(furnace).SettingInput = 0
   d(furnace).SettingOutput = 0
   hotinput.Setting = 0
   coolinput.Setting = 0
end

function storelocal
   pin_sp = sp
   move sp sp_offset
   push sp_tgt
   push previous_error
   push integral
   move sp pin_sp
end

function loadlocal
   pin_sp = sp
   sp = sp_offset + 3
   pop integral
   pop previous_error
   pop sp_tgt
   move sp pin_sp
end

function pidcontroller
   integral = integral + error * dt
   output = Kp * error + Ki * integral  + Kd * ((error - previous_error) / dt)
   previous_error = error
   min output output 1
   max output output -1
   output = output * 100 
 end

function applyactuators 
   d(furnace).SettingInput = 100
   abs output output_p
   brgez output_p 4
      d(furnace).SettingOutput = output
      output_p = 0
      jr 2
      d(furnace).SettingOutput = 0

   abs output output_t
   max output output output_p
   brltz output_t 5
   LED.Color = 4 #Red heating
   hotinput.Setting = output
   coolinput.Setting = 0
   jr 4
   LED.Color = -1 #Cooling heating
   hotinput.Setting = 0
   coolinput.Setting = output

   brgt output 3.5 2
   LED.Color = 5 #Yellow in mode 
end
