alias hash r0
alias qtty r1
alias idx r2
alias expectedqtty r3
alias firsthash r4
#Importanat!!! The algorithm contains an error that leads to endless cycle in a case when store contains some full stack packets.
#I'm going to fix it soon
alias store d0
alias stacker d1
alias flipflop d2
alias led d3
s flipflop Setting 0
s flipflop SettingOutput 0
s flipflop Mode 0
move hash 0
move qtty 0
move idx 0
move expectedqtty 0
#store.Lock = 0
main:
s stacker Activate 0
s led Color 5
s led On 1
yield
jal findhash
snez r15 hash
beqz r15 if0else
s led Color 3
jal extracthash
s led Color 5
sleep 5
j if0exit
if0else:
s led Color 1
sleep 20
if0exit:
j main
jr 132
waitstackerimport:
move idx 0
while0:
sle r15 idx 4
beqz r15 while0exit
ls qtty stacker 2 Quantity
sgt r14 qtty expectedqtty
beqz r14 if1exit
j while0exit
if1exit:
add idx idx 1
sleep 1
j while0
while0exit:
sub qtty qtty expectedqtty
j ra
waitstackerexport:
ls qtty stacker 2 Quantity
while1:
sgt r15 qtty expectedqtty
beqz r15 while1exit
yield
ls qtty stacker 2 Quantity
j while1
while1exit:
j ra
extracthash:
push ra
s stacker Mode 1
s stacker Setting 500
while2:
snez r15 hash
beqz r15 while2exit
ls expectedqtty stacker 2 Quantity
s store RequestHash hash
jal waitstackerimport
seqz r14 qtty
beqz r14 if2exit
move hash 0
if2exit:
s stacker Output 1
move expectedqtty 500
jal waitstackerexport
j while2
while2exit:
s stacker Activate 1
move expectedqtty 0
jal waitstackerexport
s stacker Activate 0
s stacker Mode 0
s led Color 2
pop ra
j ra
findhash:
move hash 0
move idx 2
l expectedqtty store Quantity
while3:
sne r15 idx 500
snez r14 expectedqtty
seqz r13 hash
and r12 r15 r14
and r12 r12 r13
beqz r12 while3exit
ls qtty store idx Quantity
ls firsthash store idx OccupantHash
add idx idx 1
snez r11 qtty
beqz r11 if3exit
sub expectedqtty expectedqtty 1
sne r10 qtty 500
beqz r10 if4exit
push idx
push expectedqtty
while4:
sne r9 idx 101
snez r8 expectedqtty
and r7 r9 r8
beqz r7 while4exit
ls qtty store idx Quantity
snez r6 qtty
beqz r6 if5exit
ls hash store idx OccupantHash
sub expectedqtty expectedqtty 1
seq r5 hash firsthash
beqz r5 if6else
j while4exit
j if6exit
if6else:
move hash 0
if6exit:
if5exit:
add idx idx 1
j while4
while4exit:
pop expectedqtty
pop idx
if4exit:
if3exit:
j while3
while3exit:
j ra