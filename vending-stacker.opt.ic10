#54->31 lines
alias hash r0
alias qtty r1
alias idx r2
alias expectedqtty r3
alias firsthash r4
alias currhash r5
alias store d0
alias stacker d1
alias flipflop d2
alias led d3
define StoreLastSlot 101
define ItemStackSize 500
findhash: #Find first not full slot, then find his pair in the rest
s store Lock 1 #Lock the storage
move hash 0
l expectedqtty store Quantity #The amount of occupated slots
move idx 2 #Start first item slot 
foreachslotouterloop:
brap idx StoreLastSlot 0.001 24 #End loop: the last item' slot
breqz expectedqtty 23 #End loop: no more occupated slots
ls qtty store idx Quantity
ls firsthash store idx OccupantHash
add idx idx 1 
beqz qtty foreachslotouterloop #Ignore empty slot 
sub expectedqtty expectedqtty 1 #Decreese the amount of occupated slots
bap qtty ItemStackSize 0.001 foreachslotouterloop #Ignore full stacked items
push idx #Prepare for inner loop by the rest of storage to find not full stacked pair
push expectedqtty
foreachslotinnerloop:
brap idx StoreLastSlot 0.001 10 #End loop: the last item' slot
breqz expectedqtty 9 #End loop: no more occupated slots
ls qtty store idx Quantity
ls currhash store idx OccupantHash
add idx idx 1
beqz qtty foreachslotinnerloop #Ignore empty slot 
sub expectedqtty expectedqtty 1
bap qtty ItemStackSize 0.001 foreachslotinnerloop #Ignore full slot
brna currhash firsthash 0.000000001 foreachslotinnerloop #Ignore wrong hash
move hash currhash #Hash found the exit will occurs 
pop expectedqtty #Inner loop exit: restore after inner cycle
pop idx
beqz hash foreachslotouterloop #Keep search until hash is null 
s store Lock 0 #Loop exit: unlock the store
j ra